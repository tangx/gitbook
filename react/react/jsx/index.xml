<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1. jsx 基础用法 on React 18/19</title><link>https://typonotes.com/books/react/react/jsx/</link><description>Recent content in 1. jsx 基础用法 on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/jsx/index.xml" rel="self" type="application/rss+xml"/><item><title>1. jsx 的介绍</title><link>https://typonotes.com/books/react/react/jsx/introduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/jsx/introduce/</guid><description>之前在 /src/App.js 中说到了 className 是 react 语法。 更准确的说是 JSX 语法。
这是一个带有变量的例子
// 定义 变量 const message = &amp;#34;this is a message&amp;#34; function App() { // return 中的内容是 jsx 语法 return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; // className 不是 HTML 语法 {message} // 使用变量 &amp;lt;/div&amp;gt; ); } 1. 什么是 jsx jsx 是 js 的一种扩展语法， 继承了 js 和 xml 的优点。
可以使用 HTML 的声明式模版。 可以使用 js 的可编程能力。 由于 jsx 本身不是标准语法。 因此需要使用 Babel 进行编译后， 才能在 浏览器 上运行。 TypeScript同理， 也是需要编译成 js 后才能在浏览器上运行。</description></item><item><title>2. jsx 的常用用法</title><link>https://typonotes.com/books/react/react/jsx/basic-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/jsx/basic-syntax/</guid><description>在 jsx 中， 可以通过 大括号语法{} 识别 JavaScript 中的表达式。
常见的包括
常量调用 变量调用 函数调用 方法调用 使用 js 对象 等等 1. 常量调用 在 BasicSyntax 内部使用 {'this is const string'}
// BasicSyntax 基础语法组建 function BasicSyntax() { return ( &amp;lt;div className=&amp;#34;BasicSyntax&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;1. 常量调用&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;{&amp;#39;this is const string&amp;#39;}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; ); } 2. 变量调用 在 BasicSyntax 组建外部定义 变量 val。 在内部使用 {val} 调用 // BasicSyntax 基础语法组建 function BasicSyntax() { return ( &amp;lt;div className=&amp;#34;BasicSyntax&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;2.</description></item><item><title>3. 列表与字典渲染</title><link>https://typonotes.com/books/react/react/jsx/list-render/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/jsx/list-render/</guid><description>代码在 /src/components/jsx/ListRender.js 中
列表默认情况是这样的
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;liubei&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;guanyu&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;zhangfei&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 1. 标准版的渲染 const list = [&amp;#39;liubei&amp;#39;, &amp;#39;guanyu&amp;#39;, &amp;#39;zhangfei&amp;#39;] function ListRender() { return ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;2.3. 循环渲染&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt; list = [&amp;#39;liubei&amp;#39;, &amp;#39;guanyu&amp;#39;, &amp;#39;zhangfei&amp;#39;]&amp;lt;/p&amp;gt; &amp;lt;h3&amp;gt;箭头函数， 完整版。 带 key &amp;lt;/h3&amp;gt; &amp;lt;ul&amp;gt; // (1) 保留外城的 ul { list.map((item, index) =&amp;gt; { // (2) 循环什么就返回什么。 // (3) key 是 React 渲染的唯一表示 return &amp;lt;li key={index}&amp;gt;{item}&amp;lt;/li&amp;gt; }) } &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; ) } 当我们要进行 列表渲染 的时候，</description></item><item><title>4. 条件渲染</title><link>https://typonotes.com/books/react/react/jsx/conditional-render/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/jsx/conditional-render/</guid><description>React 根据条件运算返回的不同结果进行结果渲染， 主要分为以下几种
逻辑判断： &amp;amp;&amp;amp;, ||, ! 三目运算符: condition? yes : no 分支语句： if-else, switch 1. 逻辑运算符 逻辑运算符：
&amp;amp;&amp;amp; 且 || 或 ! 非 function ConditionalRender() { return ( &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;04. 条件渲染: isLogin={String(isLogin)}&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;1. 逻辑语句&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;isLogin &amp;amp;&amp;amp; Login &amp;lt;/p&amp;gt; {isLogin &amp;amp;&amp;amp; &amp;lt;Login /&amp;gt;} &amp;lt;p&amp;gt;isLogin || Logout&amp;lt;/p&amp;gt; {isLogin || &amp;lt;Logout /&amp;gt;} &amp;lt;p&amp;gt;isLogin &amp;amp;&amp;amp; Login || Logout&amp;lt;/p&amp;gt; {isLogin &amp;amp;&amp;amp; &amp;lt;Login /&amp;gt; || &amp;lt;Logout /&amp;gt;} {(isLogin &amp;amp;&amp;amp; &amp;lt;Login /&amp;gt;) || &amp;lt;Logout /&amp;gt;} &amp;lt;/div &amp;gt; ) } const isLogin = false; 条件语句 必须要在最前面。 &amp;amp;&amp;amp; 和 || 可以单独使用； 也可以一起使用， 一起使用时效果类似 三目运算符。 但是 React 并不推荐这么做， 如果这样做了会给予提示： 混合使用 &amp;amp;&amp;amp; 和 ||。 请用 圆括号 指定执行顺序</description></item><item><title>5. 样式的使用</title><link>https://typonotes.com/books/react/react/jsx/style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/jsx/style/</guid><description>源代码在 /src/components/styles/RootStyle.jsx
1. 行内样式 在标签内使用使用 style={{key:v1, k2:v2}} 实现样式管理。
&amp;lt;p style={{ color: &amp;#34;red&amp;#34;, fontSize: &amp;#34;18px&amp;#34; }}&amp;gt;1.1. 行内样式&amp;lt;/p&amp;gt; 外层 {}: 开始 React 语法。 {k1:v1, k2:v2}: 是一个 Object 对象。 key 使用 驼峰 规则: font-size =&amp;gt; fontSize 向上面直接写在行内的方式， 管理起来并不清晰。 因此可以将 样式 赋值给一个 变量 保存。
export default function RootStyle() { return ( &amp;lt;div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;p style={style}&amp;gt;1.2. 行内样式2&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) } const style = { color: &amp;#34;blue&amp;#34;, fontSize: &amp;#34;18px&amp;#34; } 2.</description></item></channel></rss>