<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2. 事件绑定 on React 18/19</title><link>https://typonotes.com/books/react/react/events/</link><description>Recent content in 2. 事件绑定 on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/events/index.xml" rel="self" type="application/rss+xml"/><item><title>1. onClick 点击事件</title><link>https://typonotes.com/books/react/react/events/on-click/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/events/on-click/</guid><description>事件名称统一为 onXXXX Hanlder 函数支持多种方式定义， 变量形式 与 函数形式 // 不接受参数 // 变量形式 const handler1 = () =&amp;gt; { console.log(count); count = count + 1 } // 接收事件 // 函数形式 function handler2(event) { console.log(event) // count = count + 2 } 这里是是 onClick 点击事件。
1. 不接受参数 这种最简单， 只需要在 标签 中的 属性 中， 使用 onClick 事件时 指定 调用 handler 函数 即可。
&amp;lt;button onClick={handler1}&amp;gt;button +1&amp;lt;/button&amp;gt; 如上， 是在 button 中接收了的 onClick 事件。 注意</description></item><item><title>2. onChange 数据双向绑定</title><link>https://typonotes.com/books/react/react/events/on-change/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/events/on-change/</guid><description>在 /src/components/event/EventOnChange.js 中实现了 数据的双向绑定。 即
使用 useState 管理变量 username 的状态 使用 {username} 实现数据 从 state 到 UI 的单向绑定。 使用 onChange 捕捉控件的变化事件。 随后通过 箭头函数 获取 当前事件目标的值(e.target.value) 并通过 setUsername 保存数据， 从而数据 从 UI 到 state 的单向绑定。 当数据更新到 state 后， React 又刷新了页面。 // Path: src/components/event/EventOnClick.js import { useState } from &amp;#34;react&amp;#34; export default function EventOnChange() { const [username, setUsername] = useState(&amp;#34;zhangsan&amp;#34;) return ( &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;OnChange 事件实现数据双向绑定&amp;lt;/h2&amp;gt; {/* 1. {username} 实现数据从 state 到 UI 的单向绑定 2.</description></item></channel></rss>