<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4. Hooks on React 18/19</title><link>https://typonotes.com/books/react/react/hooks/</link><description>Recent content in 4. Hooks on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/hooks/index.xml" rel="self" type="application/rss+xml"/><item><title>use 替代 useEffect 和 useContext</title><link>https://typonotes.com/books/react/react/hooks/use/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use/</guid><description>替代 useEffect https://react.dev/reference/react/use#streaming-data-from-server-to-client
定义函数，从服务器获取资源
type MovieType = { title: string } // 获取资源，返回 Promise async function fetchMovie() { const resp = await axios.get&amp;lt;MovieType[]&amp;gt;(&amp;#34;http://localhost:8080/&amp;#34;) return resp.data[0] } useEffect 版本 export default function MovieUseEffectContainer() { // 使用 useState 管理数据状态 const [movie, setMovie] = useState&amp;lt;MovieType | undefined&amp;gt;(undefined) // 使用 useEffect 获取资源 useEffect(() =&amp;gt; { fetchMovie().then(setMovie) }, []) return ( &amp;lt;div&amp;gt; &amp;lt;Suspense fallback={&amp;lt;h2&amp;gt;MovieUseEffect, Loading .</description></item><item><title>useContext 数据传递</title><link>https://typonotes.com/books/react/react/hooks/use-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-context/</guid><description/></item><item><title>useImmer 状态数据</title><link>https://typonotes.com/books/react/react/hooks/use-immer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-immer/</guid><description>useImmer 是 useState 的 加强版。
https://github.com/immerjs/use-immer npm install immer use-immer</description></item><item><title>useRef 获取 DOM</title><link>https://typonotes.com/books/react/react/hooks/use-ref/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-ref/</guid><description>在 React 中 获取/操作 DOM， 需要使用 useRef 钩子函数
import { useRef } from &amp;#39;react&amp;#39;; export default function UseRef() { // 1. 使用 useRef 生成 ref 对象 const inputRef = useRef(null); function showDOM() { // 使用 console.log 查看 ref 对象 console.log(inputRef.current); // 使用 console.dir 展开 ref 对象 console.dir(inputRef.current); // 焦点锁定 inputRef.current.focus() } return ( &amp;lt;div&amp;gt; &amp;lt;h3&amp;gt;3. useRef 获取 DOM&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;点击 Button 在控制台查看输出&amp;lt;/p&amp;gt; {/* 将 ref 绑定到标签属性上 */} &amp;lt;input type=&amp;#34;text&amp;#34; ref={inputRef} /&amp;gt; {/* 3.</description></item><item><title>useState 状态数据</title><link>https://typonotes.com/books/react/react/hooks/use-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/use-state/</guid><description>React 讲究的是 数据驱动页面。 意思是 当状态数据被修改了，页面内容也会被重新渲染更新。
如果要上述这个效果， 就需要用到 useState 这个 钩子(Hook)
使用 useState 时， 需要先导入。 import { useState } from &amp;#34;react&amp;#34; 使用 const/let 进行结构赋值。 count 和 setCount 是一对 3. useState 创建 状态， 并定义变量的默认值。 count 被称为状态变量，不应该被直接修改， 推荐使用 const 初始化 setCount 是一个函数, 修改 count 的函数。 通过 setCount 修改 count 的值，会触发相关组件的重新渲染。 // const: count 不能被修改 const [count, setCount] = useState(0) // let: count 可以被修改 let [count, setCount] = useState(0) 注意: 使用 let 定义时， count 非只读， 可以直接修改。 但不会触发组件的重新渲染。</description></item><item><title>自定义 Hook</title><link>https://typonotes.com/books/react/react/hooks/customize-hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/hooks/customize-hook/</guid><description>简单的说 自定义 Hook 就是创建一个以 use开头的函数。 往复杂了说还需要考虑各种数据状态、冲突。
自定义 Hook 通用思路 以 use 开头的函数 函数内部可以调用其他 Hook 通常返回一个数组或对象（包含状态数据和控制方法）， 以便在组件中使用 其他组件则可以直接调用该函数，而不需要关心内部实现 代码在 /src/components/hooks/CustomizeHook.jsx
1. 原始对象， 直接管理 export default function CustomizeHook() { // 使用 useState 直接管理 const [isShow, setIsShow] = useState(true) const toggle = () =&amp;gt; { setIsShow(!isShow) } return ( &amp;lt;div&amp;gt; &amp;lt;h3&amp;gt;5. CustomizeHook&amp;lt;/h3&amp;gt; &amp;lt;button onClick={toggle}&amp;gt;Toggle: 隐藏或显示&amp;lt;/button&amp;gt; {isShow &amp;amp;&amp;amp; &amp;lt;p&amp;gt;this is a span&amp;lt;/p&amp;gt;} &amp;lt;/div&amp;gt; ) } 2.</description></item></channel></rss>