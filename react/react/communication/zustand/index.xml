<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4. zustand on React 18/19</title><link>https://typonotes.com/books/react/react/communication/zustand/</link><description>Recent content in 4. zustand on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/communication/zustand/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Zustand 安装与使用</title><link>https://typonotes.com/books/react/react/communication/zustand/zustand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/communication/zustand/zustand/</guid><description>1. Zustand 安装 官网: https://zustand-demo.pmnd.rs/ Github: https://github.com/pmndrs/zustand $ npm install zustand 2. 同步方法 从 zustand 中导入函数 create。
使用 create 创建时接受 回调函数 set =&amp;gt; ({ ??? })
回调函数 必须 使用 set 作为形参， 用于更新状态数据。 回调函数返回一个 对象。 该对象包含 状态数据 与 修改方法 修改方法 使用 set 更新数据。 set 的参数可以是
一个状态对象。 一个返回状态对象的 回调函数。 如果 要使用状态值， 则通过 state 给 set 传递参数。 如果 不使用状态值， 则可以直接 替换/覆盖 import { create } from &amp;#39;zustand&amp;#39; // 使用 create 创建状态。 // create 接收一个函数， 函数接收一个 set 参数， set 是一个函数， 用于更新状态。 const useStore = create(set =&amp;gt; ( { count: 0, // 1.</description></item><item><title>2. 多状态管理</title><link>https://typonotes.com/books/react/react/communication/zustand/multiple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/communication/zustand/multiple/</guid><description>1. 切片模式 https://www.bilibili.com/video/BV1ZB4y1Z7o8?p=145
import { create } from &amp;#39;zustand&amp;#39; // 创建counter相关切片 const createCounterStore = (set) =&amp;gt; { return { count: 0, setCount: () =&amp;gt; { set(state =&amp;gt; ({ count: state.count + 1 })) } } } // 创建channel相关切片 const createChannelStore = (set) =&amp;gt; { return { channelList: [], fetchGetList: async () =&amp;gt; { const res = await fetch(URL) const jsonData = await res.json() set({ channelList: jsonData.</description></item><item><title>3. TypeScript 类型支持</title><link>https://typonotes.com/books/react/react/communication/zustand/zustand-ts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/communication/zustand/zustand-ts/</guid><description>1. 定义 需要使用 interface 指定 state 需要实现的接口 在创建的时候使用 泛型 指定 `create((set)=&amp;gt;{}) import { create } from &amp;#39;zustand&amp;#39;; // 定义参数类型 interface CounterStore { count: number; increment: (payload: number) =&amp;gt; void; set: (payload: number) =&amp;gt; void; } // create&amp;lt;CounterStore&amp;gt; 使用泛型指定 store 的类型 const useCounterStore = create&amp;lt;CounterStore&amp;gt;((set) =&amp;gt; ({ count: 0, // 修改对象，+1 increment: (payload: number) =&amp;gt; set( (state) =&amp;gt; ({ count: state.count + payload }) ), // 直接替换对象 set(payload) { set(() =&amp;gt; ({ count: payload })); } })); export default useCounterStore; 2.</description></item></channel></rss>