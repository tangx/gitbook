<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>5. 组件通信 on React 18/19</title><link>https://typonotes.com/books/react/react/communication/</link><description>Recent content in 5. 组件通信 on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/communication/index.xml" rel="self" type="application/rss+xml"/><item><title>2. context 跨层级通信</title><link>https://typonotes.com/books/react/react/communication/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/communication/context/</guid><description>和 Golang 的 context 差不多。 在 context.Provider 下的所有节点都可以通过关键字 useContext 获取数据。
解决了 props 中不相关的组件之间需要传递数据时 状态提升 的复杂操作。
使用 createContext 方法创建一个 上下文对象 Ctx 在顶层组件 (如图, App) 中使用 Ctx.Provider 组件提供数据。 在下层组件 (如图, B) 中使用 useContext 钩子获取消费数据。 在 /src/components/communication/UseContext.jsx 中， 定义三个组件形成嵌套关系
UseContext, 对应上图中的 App A 对应 A B 对应 B 1. 定义 MsgContext 在文件级别， 使用 createContext 创建 Context 对象
注意: 经测试， 创建时提供的 default value 并不起作用。 实际 可用数据 还是需要在 &amp;lt;MsgContext.</description></item></channel></rss>