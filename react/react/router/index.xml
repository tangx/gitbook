<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>6. React-Router on React 18/19</title><link>https://typonotes.com/books/react/react/router/</link><description>Recent content in 6. React-Router on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/react/router/index.xml" rel="self" type="application/rss+xml"/><item><title>1. 安装</title><link>https://typonotes.com/books/react/react/router/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/router/setup/</guid><description>ReactRouter 为 React 提供路由管理的组件。
安装 $ npm install react-router-dom 在 package.json 中， 可以看到版本为 6.22.1
&amp;#34;dependencies&amp;#34;: { &amp;#34;react-router-dom&amp;#34;: &amp;#34;^6.22.1&amp;#34;, }, 使用 在 /src/components/router/RootRouter.jsx 中
使用 createBrowserRouter 创建 路由列表 router。 在组件中， 使用 RouterProvider 使用路由页面。 注意： 当前路由中使用的是 element 字段， 而非 componenet。
之后就可以访问 http://localhost:3000/page1 或者 http://localhost:3000/page2 切换页面了。
import { createBrowserRouter, RouterProvider } from &amp;#34;react-router-dom&amp;#34;; // 创建路由 const router = createBrowserRouter([ { path: &amp;#34;/page1&amp;#34;, element: &amp;lt;div&amp;gt;Page1&amp;lt;/div&amp;gt;, }, { path: &amp;#34;/page2&amp;#34;, element: &amp;lt;div&amp;gt;Page2&amp;lt;/div&amp;gt; } ]) export default function RootRouter() { return ( &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;8.</description></item><item><title>2. 路由导航</title><link>https://typonotes.com/books/react/react/router/navigate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/router/navigate/</guid><description>使用 路由导航 可以在不同组件之间切换。
创建两个组件 Login 和 Article。 目录结构如下。
统一 import 到 RootRouter 下管理， 对应的 router 也需要做调整。
import { createBrowserRouter, RouterProvider } from &amp;#34;react-router-dom&amp;#34;; import Login from &amp;#34;./Login&amp;#34;; import Article from &amp;#34;./Article&amp;#34;; const router = createBrowserRouter([ { path: &amp;#34;/login&amp;#34;, element: &amp;lt;Login /&amp;gt; // 登录 Login }, { path: &amp;#34;/article&amp;#34;, element: &amp;lt;Article /&amp;gt; // 文章 Article } ]) export default function RootRouter() { return ( &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;8. 路由页面 Root Page&amp;lt;/h2&amp;gt; &amp;lt;RouterProvider router={router} /&amp;gt; &amp;lt;/div&amp;gt; ); } 声明式导航 声明式导航: 是指通过在模版中使用 &amp;lt;Link /&amp;gt; 组件描述出要跳转到哪里去。 比如后台管理系统的左侧菜单通常使用这种方式进行。</description></item><item><title>3. 路由传参</title><link>https://typonotes.com/books/react/react/router/navigate-params/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/router/navigate-params/</guid><description>有 两种 方式可以通过 路由地址 进行参数传递。
路径传参: /path/1234/zhangsan query请求传参: /article?id=1101&amp;amp;name=wangwu 1. 路径传参 顾名思义， 就是 将参数放在 path 中。
在使用之前需要 定义参数名称和位置。 使用 useParams 接受参数 在 /src/components/router/RootRouter.jsx 中
const router = createBrowserRouter([ { // 定义参数位置和名称 path: &amp;#34;/article/:id/:name&amp;#34;, element: &amp;lt;Article /&amp;gt; } ]) 在 /src/components/router/Article/index.jsx 中使用 useParams 使用 解构赋值 接受参数
import { Link } from &amp;#34;react-router-dom&amp;#34;; import { useParams } from &amp;#34;react-router-dom&amp;#34;; export default function Article() { // 使用 解构赋值 获取路由参数 const { id, name } = useParams(); return ( &amp;lt;div&amp;gt; &amp;lt;h3&amp;gt;8.</description></item><item><title>4. 嵌套路由</title><link>https://typonotes.com/books/react/react/router/nested-routers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/router/nested-routers/</guid><description>嵌套路由: 在一级路由中 内嵌 了其他路由， 这种路由关系就叫做 嵌套路由。
嵌套到一级路由内的路由又被称为 二级路由。 以此类推， 三级、四级路由。
最常见应用场景， 就是 系统管理界面， 如图。
1. 使用 children 属性配置路由嵌套关系 在 /src/components/router/RootRouter.jsx 中， 添加路由表。
const router = createBrowserRouter([ { path: &amp;#34;/&amp;#34;, element: &amp;lt;Layout /&amp;gt;, // 指定子路由 children: [ // 子路由与父路由定义方式一样 { path: &amp;#34;/board&amp;#34;, element: &amp;lt;Board /&amp;gt; }, { path: &amp;#34;/about&amp;#34;, element: &amp;lt;About /&amp;gt; } ], } ]) 2. 使用 &amp;lt;Outlet /&amp;gt; 指定二级路由渲染位置 在 /src/components/router/Layout/index.</description></item><item><title>5. 默认路由</title><link>https://typonotes.com/books/react/react/router/default-router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/router/default-router/</guid><description>在 router 配置的时候， path 的值使用 * 即可配置默认路径。 当用户访问路径无法匹配时返回。
通常， 默认路径可以用于 优化 404 页面， 提高用户体验。
在 /src/components/router/RootRouter.jsx 中,
const router = createBrowserRouter([ { // 使用 * 匹配所有路由 path: &amp;#34;*&amp;#34;, element: &amp;lt;NotFound /&amp;gt; } ])</description></item><item><title>6. 路由模式</title><link>https://typonotes.com/books/react/react/router/router-modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/react/router/router-modes/</guid><description>路由模式 URL表现 底层原理 是否需要后端支持 history url/login history对象+pushState事件 需要 hash url/#/login 监听 hashChange 事件 不需要 memory url ?? ?? 1. Hash 模式 使用 createHashRouter 创建 Hash 模式。 path 上有 # 。 单页面模式
import { createHashRouter } from &amp;#34;react-router-dom&amp;#34;; const router = createHashRouter([ { path: &amp;#34;/login&amp;#34;, element: &amp;lt;Login /&amp;gt; } ]) 2. Memory 模式 使用 createMemoryRouter 模式。 path 路径 不会 在 URL 上体现出来。 单页面模式</description></item></channel></rss>