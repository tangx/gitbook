<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2. Redux 案例 - 美团 on React 18/19</title><link>https://typonotes.com/books/react/demos/redux-meituan/</link><description>Recent content in 2. Redux 案例 - 美团 on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/demos/redux-meituan/index.xml" rel="self" type="application/rss+xml"/><item><title>1. 环境准备</title><link>https://typonotes.com/books/react/demos/redux-meituan/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/redux-meituan/setup/</guid><description>1. 解压项目 解压 /src/demos/redux-meituan.tgz
2. mock 数据 创建 /src/demos/redux-meituan/mock 目录， 创建mock 数据。
$ npm install json-server 启动服务
$ json-server --watch data.json --port 3101 3. 对外提供数据 对外提供数据
const takeawayURL = &amp;#39;http://localhost:3101/takeaway&amp;#39; export { takeawayURL }</description></item><item><title>2. 使用 redux 管理数据</title><link>https://typonotes.com/books/react/demos/redux-meituan/initial-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/redux-meituan/initial-store/</guid><description>1. 创建 takeaway slice 在 /src/demos/redux-meituan/store/modules/takeaway.js
使用 @reduxjs/toolkit 提供的 createSlice 创建 state 对象 并导出 reducer import { createSlice } from &amp;#39;@reduxjs/toolkit&amp;#39; import { defaultFoodsList } from &amp;#39;./default&amp;#39; const takeaway = createSlice({ // 名称 name: &amp;#39;takeaway&amp;#39;, // 初始数据 initialState: { foodsList: defaultFoodsList, }, // actions reducers: { } }) // 导出 reducer 在 store/index.js 中合并 const takeawayReducer = takeaway.reducer export default takeawayReducer 初始化 foodsList 的时候使用了 精简版 的默认值， 保证数据解构完整性。 以避免从服务器获取数据失败时的渲染报错。</description></item><item><title>3. 菜单交互</title><link>https://typonotes.com/books/react/demos/redux-meituan/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/redux-meituan/menu/</guid><description>1. 菜单选中 在 /src/demos/redux-meituan/store/modules/takeaway.js 中
增加新的 state 字段 activeIndex 表示选中的菜单。 其值为对应的 foodsList 数组的 index 位置。 增加新的 reducer action setActiveIndex , 这是一个 同步 方法。 导出 setActiveIndex 以供外部使用 部分代码
const takeaway = createSlice({ // 名称 name: &amp;#39;takeaway&amp;#39;, // 初始数据 initialState: { // 当前选中的菜单分类 activeIndex: 0, }, // actions reducers: { setActiveIndex: (state, action) =&amp;gt; { state.activeIndex = action.payload } } }) // 省略 .</description></item><item><title>4. 购物车管理</title><link>https://typonotes.com/books/react/demos/redux-meituan/cart-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/demos/redux-meituan/cart-list/</guid><description>1. 添加购物车 在 /src/demos/redux-meituan/components/Cart/index.js 中可以看到 购物车 的相关配置。
可以看到 购物车 的数据定义是 cart=[] 空数组。
const Cart = () =&amp;gt; { const cart = [] // 省略 ... } 在 /src/demos/redux-meituan/components/FoodsCategory/FoodItem/index.js 中
可以看到 具体商品 配置。 从传入的 props 中解构出来了所有商品字段。
const Foods = ({ id, picture, name, unit, description, food_tag_list, month_saled, like_ratio_desc, price, tag, count }) =&amp;gt; { // 省略 ... } 1.1. 优化 store 因此在 /src/demos/redux-meituan/store/modules/takeaway.js 中</description></item></channel></rss>