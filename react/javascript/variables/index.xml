<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2. 变量 on React 18/19</title><link>https://typonotes.com/books/react/javascript/variables/</link><description>Recent content in 2. 变量 on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/javascript/variables/index.xml" rel="self" type="application/rss+xml"/><item><title>1. 声明</title><link>https://typonotes.com/books/react/javascript/variables/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/variables/variable/</guid><description>变量特点
使用 let 定义。 但 同一个变量名 并不能被重复定义。 变量可以重新赋值 1. 变量定义 // 使用 let 定义 let a = 1 console.log(a); // 1 // 重新赋值 a = 2 console.log(a); // 2 // 重复定义 // let a = 3 // SyntaxError: Identifier &amp;#39;a&amp;#39; has already been declared 其他定义和使用方式
// 多个变量定义 let x = 1, y = 2 // 先定义后赋值 let z z = 1 2. 变量命名规则 变量名支持 大小写字母 [a-zA-Zs] 数字 `[0-9] 下划线 _ 美元符号 $ 不能以数字开头 // 建议用 let _abc = 123 let Abc = 123 let aBc = 123 // 语法错误 // let 1abc = 123 // SyntaxError: Invalid or unexpected token 虽然变量名中包含 $ 是合法的， 甚至是在变量名中间。 但是不建议用。 其他语言没有这种规则， 何必徒添烦恼。</description></item><item><title>2. 常量</title><link>https://typonotes.com/books/react/javascript/variables/constant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/variables/constant/</guid><description>常量特点： 常量是不可改变的 变量
常量使用 const 关键字定义 常量不可被重复赋值。 但如果常量是引用类型(数组/对象), 则其字段可以被修改。 其他方便 与变量一致 1. 常量的定义 // 定义常量， 简单类型 const a = 100 console.log(a) // 100 // 重新复制 // a = 200 // Error: Assignment to constant variable. // 定义常量， 引用类型（对象） const b = { name: &amp;#34;zhangsan&amp;#34; } // 可以 修改对象值 b.name = &amp;#34;lisi&amp;#34; console.log(b.name) // lisi // 不可以 重新赋值一个新对象 // b = { name: &amp;#34;wangwu&amp;#34; } // Error: Assignment to constant variable.</description></item><item><title>3. 模版字符串</title><link>https://typonotes.com/books/react/javascript/variables/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/variables/format/</guid><description>模版字符串可以很方便的 在字符串中插入 变量或常量
使用模版字符串
必须使用 反引号 ` 包裹字符串 需要使用 ${ expression } 格式。 其中 expression 是 表达式 或 变量 const name = &amp;#34;zhangsan&amp;#34; let age = 20 // 使用变量 console.log(`name: ${name}, age: ${age}`); // name: zhangsan, age: 2 // 模版字符串中还可以使用表达式 console.log(`1 + 2 = ${1 + 2}`); // 1 + 2 = 3 console.log(`&amp;#39;a&amp;#39;+&amp;#39;b&amp;#39;= ${&amp;#39;a&amp;#39; + &amp;#39;b&amp;#39;}`); // &amp;#39;a&amp;#39;+&amp;#39;b&amp;#39;= ab</description></item><item><title>4. 作用域</title><link>https://typonotes.com/books/react/javascript/variables/scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/variables/scope/</guid><description>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variables
作用域是指 变量和常量 的生效范围。 即 在哪里定义， 就在哪里生效
全局范围: 所有代码的默认作用域 模块范围: 模块代码 函数范围: 函数内 let x = 100 if (true) { let x = 5; // block-scoped to the containing if statement console.log(x); // 5 } console.log(x); // 100 let z = 100 if (true) { z = 5; // modify, not re-declare } console.log(z); // z is 5 2. 函数作用域 // 函数作用域 function bigger(a, b) { if (a &amp;gt; b) { let res = &amp;#34;a &amp;gt; b&amp;#34;; } else { let res = &amp;#34;a &amp;lt; b&amp;#34; } } console.</description></item></channel></rss>