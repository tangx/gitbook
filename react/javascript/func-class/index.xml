<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>5. 函数和类 on React 18/19</title><link>https://typonotes.com/books/react/javascript/func-class/</link><description>Recent content in 5. 函数和类 on React 18/19</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://typonotes.com/books/react/javascript/func-class/index.xml" rel="self" type="application/rss+xml"/><item><title>1. 函数</title><link>https://typonotes.com/books/react/javascript/func-class/func/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/func-class/func/</guid><description>function default parameters rest parameters 函数的基本定义
关键字 function 函数名 func1 代码块 {} 另外, 函数也可以赋值给其他变量，并调用。
1. 具名函数定义 function func1() { console.log(&amp;#39;func1&amp;#39;); } // call func func1(); // func1 // 赋值给新变量 const newFunc1 = func1; newFunc1(); // func1 2. 匿名函数赋值变量 将 匿名函数 赋值给赋值给一个变量。
const varFunc = function () { console.log(&amp;#34;var function&amp;#34;); }; varFunc(); // var function 2. 接受参数 default parameters</description></item><item><title>2. 箭头函数</title><link>https://typonotes.com/books/react/javascript/func-class/arrow-func/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/func-class/arrow-func/</guid><description>Arrow functions
箭头函数用法和 function 函数一样。
就是定义方式多了那么一点点。 主要集中在 (), {} 是否省略的问题上
() =&amp;gt; expression param =&amp;gt; expression (param) =&amp;gt; expression (param1, paramN) =&amp;gt; expression () =&amp;gt; { statements } param =&amp;gt; { statements } (param1, paramN) =&amp;gt; { statements } 箭头函数的 this 箭头函数的 this 是一个难点。 需要继续研读文档。</description></item><item><title>3. 函数闭包</title><link>https://typonotes.com/books/react/javascript/func-class/closure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/func-class/closure/</guid><description>Closures
定义:
函数嵌套 内部函数 直接 使用外部函数的变量。 而非传参数使用。 Demo 代码,
function makeFunc() { const name = &amp;#34;Mozilla&amp;#34;; function displayName() { console.log(name); } return displayName; } const myFunc = makeFunc(); myFunc(); 闭包在 Go 中的应用， 辅助理解 换个 Golang 的闭包的使用案例: 配置参数
type Person struct { name string age int } type Option = func(*Person) func (p *Person) WithOptios(opts ...Option) { for _, opt := range opts { opt(p) } }</description></item><item><title>3. 类</title><link>https://typonotes.com/books/react/javascript/func-class/class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/func-class/class/</guid><description/></item><item><title>4. 函数柯里化</title><link>https://typonotes.com/books/react/javascript/func-class/currying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/react/javascript/func-class/currying/</guid><description/></item></channel></rss>