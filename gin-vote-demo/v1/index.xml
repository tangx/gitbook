<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>V1 on Go投票项目</title><link>https://typonotes.com/books/gin-vote-demo/v1/</link><description>Recent content in V1 on Go投票项目</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 04 Apr 2024 08:11:23 +0000</lastBuildDate><atom:link href="https://typonotes.com/books/gin-vote-demo/v1/index.xml" rel="self" type="application/rss+xml"/><item><title>08. 设计所有表</title><link>https://typonotes.com/books/gin-vote-demo/v1/design-tables/</link><pubDate>Thu, 04 Apr 2024 08:11:23 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/design-tables/</guid><description>用户表 管理用户列表 投票表 管理投票列表 管理投票与其创建者的关系 投票选项表 管理选项 管理选项与其绑定投票的关系 选项-用户表 管理用户与投票选项的关系。 避免用户重复投票。 -- 用户表 CREATETABLE`user`(`id`bigintNOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=5DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票表 -- 绑定投票与其创建用户的关系 CREATETABLE`vote`(`id`bigintNOTNULLAUTO_INCREMENT,`title`varchar(255)COLLATEutf8mb4_binDEFAULTNULL,`type`intDEFAULTNULLCOMMENT&amp;#39;0 for single, 1 for multiple choice&amp;#39;,`status`intDEFAULTNULLCOMMENT&amp;#39;0 for normal, 1 for expired&amp;#39;,`user_id`bigintDEFAULTNULLCOMMENT&amp;#39;who created&amp;#39;,`expired_in`bigintDEFAULTNULL,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票选项表 -- 绑定投票选项表与投票表关系 CREATETABLE`vote_opt`(`id`bigintNOTNULLAUTO_INCREMENT,`name`varchar(255)COLLATEutf8mb4_binDEFAULTNULLCOMMENT&amp;#39;选项名称&amp;#39;,`count`intDEFAULTNULLCOMMENT&amp;#39;选项投票计数器&amp;#39;,`vote_id`bigintDEFAULTNULLCOMMENT&amp;#39;绑定到的投票单&amp;#39;,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票选项用户关系表 -- 防止用户重复投票 CREATETABLE`vote_opt_user`(`id`bigintNOTNULL,`vote_id`bigintDEFAULTNULLCOMMENT&amp;#39;表单ID&amp;#39;,`user_id`bigintDEFAULTNULLCOMMENT&amp;#39;投票用户ID&amp;#39;,`vote_opt_id`bigintDEFAULTNULLCOMMENT&amp;#39;选项ID&amp;#39;,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;2. 将 SQL 转换为 ORM 模型 使用在线工具， 将 SQL 转换为 ORM 模型。
http://www.gotool.top/handlesql/sql2gorm</description></item><item><title>01. 使用 Gin 搭建一个 WebServer</title><link>https://typonotes.com/books/gin-vote-demo/v1/initialize-gin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/initialize-gin/</guid><description>初始化项目
使用 gin 首先最基本的健康检查页面
package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { r := gin.Default() // 健康检查接口 r.GET(&amp;#34;/ping&amp;#34;, pingHandler) err := r.Run(&amp;#34;:8080&amp;#34;) if err != nil { panic(err) } } func pingHandler(c *gin.Context) { // 这里的 status 不建议直接使用 200，建议使用 http.StatusOK // 语义化之后更加直观，不容易出错 c.String(http.StatusOK, &amp;#34;pong&amp;#34;) } 创建 Makefile ， 设置常用启动命令 run: tidy go run . tidy: go mod tidy 使用 makefile 启动服务</description></item><item><title>02. 使用 go template 实现一个登录页面</title><link>https://typonotes.com/books/gin-vote-demo/v1/ping-pong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/ping-pong/</guid><description>1. 管理静态页面模版 在项目根目录中， 创建 tmpl 管理静态页面模版。 创建 tmpl/login.tmpl 作为登陆页面 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Login&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;Your Name&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34; placeholder=&amp;#34;Password&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Sign in&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 2. gin 加载静态模版， 并对外提供路由 使用 r.LoadHTMLGlob(&amp;quot;tmpl/*&amp;quot;) 缓存静态文件 在使用时， 就直接使用相对路径了。 c.HTML(http.StatusOK, &amp;quot;login.tmpl&amp;quot;, nil) package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.</description></item><item><title>03. 使用 POST 提交 Form 表单</title><link>https://typonotes.com/books/gin-vote-demo/v1/post-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/post-form/</guid><description>1. 创建 User 接受数据 form 用于绑定 post 提交的数据 json 用于返回展示。 type User struct { Name string `form:&amp;#34;name&amp;#34; json:&amp;#34;name&amp;#34;` Password string `form:&amp;#34;password&amp;#34; json:&amp;#34;password&amp;#34;` } 2. 创建 postLoginHandler 实现绑定逻辑 这里看注释。
需要 注意 在错误处理之后， 使用 return 结束逻辑。
func postLoginHandler(c *gin.Context) { // #5 获取表单数据 user := &amp;amp;User{} err := c.ShouldBind(user) if err != nil { c.String(http.StatusBadRequest, &amp;#34;bad request&amp;#34;) // 显示错误信息之后， 一定要 return 结束后序逻辑 return } // 成功后显示用户信息 c.</description></item><item><title>04. 使用 GORM 连接 MySQL</title><link>https://typonotes.com/books/gin-vote-demo/v1/gorm-conn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/gorm-conn/</guid><description>1. 使用 docker-compose 创建 MySQL 实例 使用 docker-compose 管理 Mysql 容器
# docker-compose.ymlversion:&amp;#39;3.1&amp;#39;services:db:network_mode:defaultimage:mysql:8.3# command: --default-authentication-plugin=mysql_native_passwordrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:Mysql12345volumes:- ./mysql-data:/var/lib/mysqlports:- 3306:3306运行 MySQL 容器
$ docker-compose up -d 2. 初始化数据库和表 SETNAMESutf8mb4;SETFOREIGN_KEY_CHECKS=0;-- ---------------------------- -- Table structure for user -- ---------------------------- DROPTABLEIFEXISTS`user`;CREATETABLE`user`(`id`bigint(20)NOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULL,`updated_time`datetimeDEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=3DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- ---------------------------- -- Records of user -- ---------------------------- BEGIN;INSERTINTO`user`(`id`,`name`,`password`,`created_time`,`updated_time`)VALUES(1,&amp;#39;admin&amp;#39;,&amp;#39;admin&amp;#39;,&amp;#39;2024-03-31 16:42:40&amp;#39;,&amp;#39;2024-03-31 16:42:42&amp;#39;);INSERTINTO`user`(`id`,`name`,`password`,`created_time`,`updated_time`)VALUES(2,&amp;#39;admin1&amp;#39;,&amp;#39;admin1&amp;#39;,&amp;#39;2024-03-31 16:45:46&amp;#39;,&amp;#39;2024-03-31 16:45:48&amp;#39;);COMMIT;SETFOREIGN_KEY_CHECKS=1;3. 单例模式创建 gorm 连接 // 创建 mysql 连接 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;gorm.</description></item><item><title>05. 拆分为 MVC 目录结构</title><link>https://typonotes.com/books/gin-vote-demo/v1/mvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/mvc/</guid><description>1. MVC 目录 $ tree app app ├── model # Model 数据库相关操作 ├── view # View 视图/模版相关操作 ├── logic # Controller 控制器/代码逻辑相关操作 ├── router # 路由相关的操作 └── tools # 公共组件 5 directories, 0 files 2. 拆分代码到 MVC 目录 $ tree app app ├── app.go ├── logic │ ├── login.go │ └── ping.go ├── model │ ├── db.go │ └── user.go ├── router │ └── router.</description></item><item><title>06. 使用 cookie 管理登录状态</title><link>https://typonotes.com/books/gin-vote-demo/v1/cookie-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/cookie-check/</guid><description>1. 使用 SQL 转 Struct 匹配对象 http://www.gotool.top/handlesql/sql2gorm
建表 SQL
CREATETABLE`user`(`id`bigint(20)NOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULL,`updated_time`datetimeDEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=3DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;转换的对象
type User struct { Id int64 `gorm:&amp;#34;column:id;primary_key;AUTO_INCREMENT;NOT NULL&amp;#34; form:&amp;#34;id&amp;#34; json:&amp;#34;id&amp;#34;` Name string `gorm:&amp;#34;column:name;default:NULL&amp;#34; form:&amp;#34;name&amp;#34; json:&amp;#34;name&amp;#34;` Password string `gorm:&amp;#34;column:password;default:NULL&amp;#34; form:&amp;#34;password&amp;#34; json:&amp;#34;password&amp;#34;` CreatedTime time.Time `gorm:&amp;#34;column:created_time;default:NULL&amp;#34; form:&amp;#34;createdTime&amp;#34; json:&amp;#34;createdTime&amp;#34;` UpdatedTime time.Time `gorm:&amp;#34;column:updated_time;default:NULL&amp;#34; form:&amp;#34;updatedTime&amp;#34; json:&amp;#34;updatedTime&amp;#34;` } 2. 创建 Gin RouterGroup 管理 Index 页面 在 router/router.go 中创建 路由分组
// 首页 r.GET(&amp;#34;/&amp;#34;, logic.Index) { index := r.</description></item><item><title>07. 通用返回结构</title><link>https://typonotes.com/books/gin-vote-demo/v1/common-resp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/common-resp/</guid><description>通用返回结构可以使返回对象更加标准， 方便对接前端。
1. 定义通用结构 type Ecode struct { Code int `json:&amp;#34;code&amp;#34;` // code, 可以自定错误代码 Message string `json:&amp;#34;message&amp;#34;` // 消息 Data any `json:&amp;#34;data&amp;#34;` // 数据 } 2. 使用通用结构 在各个 Handler 中， 找到需要返回的地方， 修改为通用结构
例如 PingHandler
// c.String(http.StatusOK, &amp;#34;pong&amp;#34;) c.JSON(http.StatusOK, tools.Ecode{ Code: http.StatusOK, Message: &amp;#34;pong&amp;#34;, }) 再如 LoginHandler 登录失败时
// c.JSON(http.StatusBadRequest, gin.H{ // &amp;#34;msg&amp;#34;: &amp;#34;user not found&amp;#34;, // &amp;#34;error&amp;#34;: fmt.Sprintf(&amp;#34;%v&amp;#34;, err), // }) c.</description></item><item><title>09. 列出所有投票并撰写单元测试</title><link>https://typonotes.com/books/gin-vote-demo/v1/list-vote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/list-vote/</guid><description>1. 列出所有投票结果 在 /model/vote.go 中添加以下代码：
// GetVotes 获取投票列表 func GetVotes() ([]Vote, error) { votes := make([]Vote, 0) tx := Conn.Table(&amp;#34;vote&amp;#34;).Find(&amp;amp;votes) if tx.Error != nil { return nil, tx.Error } return votes, nil } 2. 插入数据 在 vote 表中插入一些数据：
INSERTINTO`vote`(`id`,`title`,`type`,`status`,`user_id`,`expired_in`,`created_time`,`updated_time`)VALUES(1,&amp;#39;今天晚上吃什么&amp;#39;,0,0,1,86400,&amp;#39;2024-04-06 08:03:01&amp;#39;,&amp;#39;2024-04-06 08:03:01&amp;#39;),(2,&amp;#39;你会用vscode吗&amp;#39;,0,0,2,86400,&amp;#39;2024-04-06 08:03:01&amp;#39;,&amp;#39;2024-04-06 08:03:01&amp;#39;);3. 撰写简单的单元测试 创建 /model/vote_test.go, 编写一个简单的单元测试：
func init() { NewMysql() } // TestGetVotes 测试获取投票列表 func TestGetVotes(t *testing.T) { votes, err := GetVotes() if err !</description></item><item><title>10. 渲染数据到模板</title><link>https://typonotes.com/books/gin-vote-demo/v1/render-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://typonotes.com/books/gin-vote-demo/v1/render-template/</guid><description>1. 渲染数据到登录后首页 https://www.bilibili.com/video/BV1AZ42117JH/
在 logic/index.go 页面中从 model.vote 中数据所有投票数据。 func IndexLogin(c *gin.Context) { name, _ := c.Cookie(&amp;#34;name&amp;#34;) // 获取所有投票数据 votes, err := model.GetVotes() if err != nil { c.JSON(http.StatusBadRequest, tools.Ecode{ Code: http.StatusBadRequest, Message: err.Error(), }) } // 添加到 data 中进行渲染 data := map[string]any{ &amp;#34;Name&amp;#34;: name, &amp;#34;Votes&amp;#34;: votes, } c.HTML(200, &amp;#34;index-login.tmpl&amp;#34;, data) } 在 view/index-login.tmpl 中添加投票数据渲染模版 &amp;lt;h3&amp;gt;投票列表&amp;lt;/h3&amp;gt; {{ range $key, $value := .</description></item></channel></rss>