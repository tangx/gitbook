[{"id":0,"href":"/books/gin-vote-demo/","title":"","parent":"","content":"go-vote-demo     a vote website for practicing\nGo语言编程入门练习\n这是一个投票项目: https://www.bilibili.com/video/BV1Xi421Z72A/ 。 项目会 模拟 实际开发场景， 进行 功能实现 \u0026lt;\u0026ndash;\u0026gt; 优化迭代 的反复循环。\n","description":"go-vote-demo     a vote website for practicing\nGo语言编程入门练习\n这是一个投票项目: https://www.bilibili.com/video/BV1Xi421Z72A/ 。 项目会 模拟 实际开发场景， 进行 功能实现 \u0026lt;\u0026ndash;\u0026gt; 优化迭代 的反复循环。"},{"id":1,"href":"/books/gin-vote-demo/v1/design-tables/","title":"8. 设计所有表","parent":"V1","content":" 用户表  管理用户列表   投票表  管理投票列表 管理投票与其创建者的关系   投票选项表  管理选项 管理选项与其绑定投票的关系   选项-用户表  管理用户与投票选项的关系。 避免用户重复投票。     -- 用户表 CREATETABLE`user`(`id`bigintNOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=5DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票表 -- 绑定投票与其创建用户的关系 CREATETABLE`vote`(`id`bigintNOTNULLAUTO_INCREMENT,`title`varchar(255)COLLATEutf8mb4_binDEFAULTNULL,`type`intDEFAULTNULLCOMMENT\u0026#39;0 for single, 1 for multiple choice\u0026#39;,`status`intDEFAULTNULLCOMMENT\u0026#39;0 for normal, 1 for expired\u0026#39;,`user_id`bigintDEFAULTNULLCOMMENT\u0026#39;who created\u0026#39;,`expired_in`bigintDEFAULTNULL,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票选项表 -- 绑定投票选项表与投票表关系 CREATETABLE`vote_opt`(`id`bigintNOTNULLAUTO_INCREMENT,`name`varchar(255)COLLATEutf8mb4_binDEFAULTNULLCOMMENT\u0026#39;选项名称\u0026#39;,`count`intDEFAULTNULLCOMMENT\u0026#39;选项投票计数器\u0026#39;,`vote_id`bigintDEFAULTNULLCOMMENT\u0026#39;绑定到的投票单\u0026#39;,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票选项用户关系表 -- 防止用户重复投票 CREATETABLE`vote_opt_user`(`id`bigintNOTNULL,`vote_id`bigintDEFAULTNULLCOMMENT\u0026#39;表单ID\u0026#39;,`user_id`bigintDEFAULTNULLCOMMENT\u0026#39;投票用户ID\u0026#39;,`vote_opt_id`bigintDEFAULTNULLCOMMENT\u0026#39;选项ID\u0026#39;,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;2. 将 SQL 转换为 ORM 模型     使用在线工具， 将 SQL 转换为 ORM 模型。\n http://www.gotool.top/handlesql/sql2gorm\n 这我个人觉得还缺少一个 软删除 字段 DeletedTime。 用于标记字段是否删除， 以及删除时间。\npackage model import \u0026#34;time\u0026#34; type Vote struct { Id int64 `gorm:\u0026#34;column:id;primary_key;AUTO_INCREMENT;NOT NULL\u0026#34;` Title string `gorm:\u0026#34;column:title;default:NULL\u0026#34;` Type int32 `gorm:\u0026#34;column:type;default:NULL;comment:\u0026#39;0 for single, 1 for multiple choice\u0026#39;\u0026#34;` Status int32 `gorm:\u0026#34;column:status;default:NULL;comment:\u0026#39;0 for normal, 1 for expired\u0026#39;\u0026#34;` UserId int64 `gorm:\u0026#34;column:user_id;default:NULL;comment:\u0026#39;who created\u0026#39;\u0026#34;` ExpiredIn int64 `gorm:\u0026#34;column:expired_in;default:NULL\u0026#34;` CreatedTime time.Time `gorm:\u0026#34;column:created_time;default:NULL\u0026#34;` UpdatedTime time.Time `gorm:\u0026#34;column:updated_time;default:NULL\u0026#34;` } func (v *Vote) TableName() string { return \u0026#34;vote\u0026#34; } type VoteOpt struct { Id int64 `gorm:\u0026#34;column:id;primary_key;AUTO_INCREMENT;NOT NULL\u0026#34;` Name string `gorm:\u0026#34;column:name;default:NULL;comment:\u0026#39;选项名称\u0026#39;\u0026#34;` Count int32 `gorm:\u0026#34;column:count;default:NULL;comment:\u0026#39;选项投票计数器\u0026#39;\u0026#34;` VoteId int64 `gorm:\u0026#34;column:vote_id;default:NULL;comment:\u0026#39;绑定到的投票单\u0026#39;\u0026#34;` CreatedTime time.Time `gorm:\u0026#34;column:created_time;default:NULL\u0026#34;` UpdatedTime time.Time `gorm:\u0026#34;column:updated_time;default:NULL\u0026#34;` } func (v *VoteOpt) TableName() string { return \u0026#34;vote_opt\u0026#34; } type VoteOptUser struct { Id int64 `gorm:\u0026#34;column:id;primary_key;NOT NULL\u0026#34;` VoteId int64 `gorm:\u0026#34;column:vote_id;default:NULL;comment:\u0026#39;表单ID\u0026#39;\u0026#34;` UserId int64 `gorm:\u0026#34;column:user_id;default:NULL;comment:\u0026#39;投票用户ID\u0026#39;\u0026#34;` VoteOptId int64 `gorm:\u0026#34;column:vote_opt_id;default:NULL;comment:\u0026#39;选项ID\u0026#39;\u0026#34;` CreatedTime time.Time `gorm:\u0026#34;column:created_time;default:NULL\u0026#34;` UpdatedTime time.Time `gorm:\u0026#34;column:updated_time;default:NULL\u0026#34;` } func (v *VoteOptUser) TableName() string { return \u0026#34;vote_opt_user\u0026#34; } ","description":"用户表  管理用户列表   投票表  管理投票列表 管理投票与其创建者的关系   投票选项表  管理选项 管理选项与其绑定投票的关系   选项-用户表  管理用户与投票选项的关系。 避免用户重复投票。     -- 用户表 CREATETABLE`user`(`id`bigintNOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=5DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票表 -- 绑定投票与其创建用户的关系 CREATETABLE`vote`(`id`bigintNOTNULLAUTO_INCREMENT,`title`varchar(255)COLLATEutf8mb4_binDEFAULTNULL,`type`intDEFAULTNULLCOMMENT\u0026#39;0 for single, 1 for multiple choice\u0026#39;,`status`intDEFAULTNULLCOMMENT\u0026#39;0 for normal, 1 for expired\u0026#39;,`user_id`bigintDEFAULTNULLCOMMENT\u0026#39;who created\u0026#39;,`expired_in`bigintDEFAULTNULL,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票选项表 -- 绑定投票选项表与投票表关系 CREATETABLE`vote_opt`(`id`bigintNOTNULLAUTO_INCREMENT,`name`varchar(255)COLLATEutf8mb4_binDEFAULTNULLCOMMENT\u0026#39;选项名称\u0026#39;,`count`intDEFAULTNULLCOMMENT\u0026#39;选项投票计数器\u0026#39;,`vote_id`bigintDEFAULTNULLCOMMENT\u0026#39;绑定到的投票单\u0026#39;,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- 投票选项用户关系表 -- 防止用户重复投票 CREATETABLE`vote_opt_user`(`id`bigintNOTNULL,`vote_id`bigintDEFAULTNULLCOMMENT\u0026#39;表单ID\u0026#39;,`user_id`bigintDEFAULTNULLCOMMENT\u0026#39;投票用户ID\u0026#39;,`vote_opt_id`bigintDEFAULTNULLCOMMENT\u0026#39;选项ID\u0026#39;,`created_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,`updated_time`datetimeDEFAULTNULLONUPDATECURRENT_TIMESTAMP,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;2. 将 SQL 转换为 ORM 模型     使用在线工具， 将 SQL 转换为 ORM 模型。\n http://www.gotool.top/handlesql/sql2gorm"},{"id":2,"href":"/books/gin-vote-demo/v1/","title":"V1","parent":"","content":"","description":""},{"id":3,"href":"/books/gin-vote-demo/v1/initialize-gin/","title":"1. 使用 Gin 搭建一个 WebServer","parent":"V1","content":"  初始化项目\n  使用 gin 首先最基本的健康检查页面\n  package main import ( \u0026#34;net/http\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func main() { r := gin.Default() // 健康检查接口 \tr.GET(\u0026#34;/ping\u0026#34;, pingHandler) err := r.Run(\u0026#34;:8080\u0026#34;) if err != nil { panic(err) } } func pingHandler(c *gin.Context) { // 这里的 status 不建议直接使用 200，建议使用 http.StatusOK \t// 语义化之后更加直观，不容易出错 \tc.String(http.StatusOK, \u0026#34;pong\u0026#34;) } 创建 Makefile ， 设置常用启动命令  run: tidy go run . tidy: go mod tidy 使用 makefile 启动服务\n$ make run 安装 REST-Client 插件 （VSCode）  安装插件 REST-Client 插件， 快速测试 API\n# main.http ### GET Login GET http://localhost:8080/ping  ","description":"初始化项目\n  使用 gin 首先最基本的健康检查页面\n  package main import ( \u0026#34;net/http\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func main() { r := gin.Default() // 健康检查接口 \tr.GET(\u0026#34;/ping\u0026#34;, pingHandler) err := r.Run(\u0026#34;:8080\u0026#34;) if err != nil { panic(err) } } func pingHandler(c *gin.Context) { // 这里的 status 不建议直接使用 200，建议使用 http.StatusOK \t// 语义化之后更加直观，不容易出错 \tc.String(http.StatusOK, \u0026#34;pong\u0026#34;) } 创建 Makefile ， 设置常用启动命令  run: tidy go run . tidy: go mod tidy 使用 makefile 启动服务"},{"id":4,"href":"/books/gin-vote-demo/v1/render-template/","title":"10. 渲染数据到模板","parent":"V1","content":"1. 渲染数据到登录后首页      https://www.bilibili.com/video/BV1AZ42117JH/\n  在 logic/index.go 页面中从 model.vote 中数据所有投票数据。  func IndexLogin(c *gin.Context) { name, _ := c.Cookie(\u0026#34;name\u0026#34;) // 获取所有投票数据 \tvotes, err := model.GetVotes() if err != nil { c.JSON(http.StatusBadRequest, tools.Ecode{ Code: http.StatusBadRequest, Message: err.Error(), }) } // 添加到 data 中进行渲染 \tdata := map[string]any{ \u0026#34;Name\u0026#34;: name, \u0026#34;Votes\u0026#34;: votes, } c.HTML(200, \u0026#34;index-login.tmpl\u0026#34;, data) } 在 view/index-login.tmpl 中添加投票数据渲染模版  \u0026lt;h3\u0026gt;投票列表\u0026lt;/h3\u0026gt; {{ range $key, $value := .Votes }} \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;{{ $key}} - {{ $value.Title }}\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{ end }}  2. 根据ID获取投票信息并渲染      https://www.bilibili.com/video/BV1at421t7e7/\n  在 model/vote.go 中添加根据ID获取投票信息的方法  // GetVotes 获取投票列表 func GetVotes() ([]Vote, error) { votes := make([]Vote, 0) tx := Conn.Table(\u0026#34;vote\u0026#34;).Find(\u0026amp;votes) if tx.Error != nil { return nil, tx.Error } return votes, nil } 在 view/vote.html 中创建投票详情模版  \u0026lt;!-- vote 信息--\u0026gt; \u0026lt;div class=\u0026#34;vote\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{ .Title }}\u0026lt;/h2\u0026gt; \u0026lt;span\u0026gt;状态: {{ .Status }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;创建用户: {{ .UserId }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;过期时间: {{ .ExpiredIn }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;创建时间: {{ .CreatedTime }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 在 logic/vote.go 添加根据查询Vote数据并渲染页面  func GetVoteHandler(c *gin.Context) { idStr := c.Query(\u0026#34;id\u0026#34;) if idStr == \u0026#34;\u0026#34; { c.JSON(http.StatusBadRequest, tools.EcodeBadRequest(\u0026#34;id is required\u0026#34;)) return } id, err := strconv.ParseInt(idStr, 10, 64) if err != nil { c.JSON(http.StatusBadRequest, tools.EcodeBadRequest(\u0026#34;id is invalid\u0026#34;)) return } vote, err := model.GetVote(id) if err != nil { c.JSON(http.StatusBadRequest, tools.EcodeBadRequest(err.Error())) return } //c.JSON(http.StatusOK, vote) \tc.HTML(http.StatusOK, \u0026#34;vote.html\u0026#34;, vote) }  3. 关联 Index 和 Vote 页面     在 view/index-login.tmpl 中添加跳转链接\n 使用 a 标签跳转到 vote 页面 使用 {{ $value.Id}} 传递参数  \u0026lt;h3\u0026gt;投票列表\u0026lt;/h3\u0026gt; {{ range $key, $value := .Votes }} \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;!-- 使用 a 标签传递跳转页面。 --\u0026gt; \u0026lt;a href=\u0026#34;/vote?id={{ $value.Id}} \u0026#34;\u0026gt;{{ $key}} - {{ $value.Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{ end }}  4. 展示 VoteOpts 选项      在 model/vote.go 中添加获取选项信息的方法  // GetVoteOptsByVoteId 根据投票 ID 查询选项 func GetVoteOptsByVoteId(voteId int64) ([]VoteOpt, error) { voteOpts := make([]VoteOpt, 0) tx := Conn.Table(\u0026#34;vote_opt\u0026#34;).Where(\u0026#34;vote_id = ?\u0026#34;, voteId).Find(\u0026amp;voteOpts) if tx.Error != nil { return nil, tx.Error } return voteOpts, nil } 在 logic/vote.go 中获取选项信息并渲染到页面。   注意: 由于同时返回了 Vote 和 VoteOpts 信息。 因此使用 map[string]any 作为数据容器。 对应的模版也需要进行更改。，\n func GetVoteHandler(c *gin.Context) { vote, err := model.GetVote(id) opts, err := model.GetVoteOptsByVoteId(id) // 使用 data 组合 vote 和 vote_opt 数据 \tdata := map[string]any{ \u0026#34;Vote\u0026#34;: vote, \u0026#34;Opts\u0026#34;: opts, } c.HTML(http.StatusOK, \u0026#34;vote.html\u0026#34;, data) } 在 view/vote.html 中， 添加选项信息展示  \u0026lt;!-- vote 信息--\u0026gt; \u0026lt;!-- 修改数据结构字段， 增加 .Vote --\u0026gt; \u0026lt;div class=\u0026#34;vote\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{ .Vote.Title }}\u0026lt;/h2\u0026gt; \u0026lt;span\u0026gt;状态: {{ .Vote.Status }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;创建用户: {{ .Vote.UserId }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;过期时间: {{ .Vote.ExpiredIn }}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;创建时间: {{ .Vote.CreatedTime }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 新增 VoteOpt 信息--\u0026gt; \u0026lt;!-- vote_opt 信息--\u0026gt; \u0026lt;div class=\u0026#34;vote-opt\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {{ range $key, $value := .Opts }} \u0026lt;li\u0026gt;{{ $value.Id}} - {{ $value.Name }} - {{ $value.Count }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;  5. Post VoteOpts 数据到数据库并重新渲染页面      在 model/vote.go 中添加更新方法  // UpdateVoteCount 更新 VoteOpt 表计数器 func UpdateVoteCount(id int64, voteId int64) error { tx := Conn.Table(\u0026#34;vote_opt\u0026#34;). Where(\u0026#34;id = ? AND vote_id = ?\u0026#34;, id, voteId). Update(\u0026#34;count\u0026#34;, gorm.Expr(\u0026#34;count + ?\u0026#34;, 1)) if tx.Error != nil { return tx.Error } return nil } 同时在数据库中插入预设字段\nINSERTINTO`vote_opt`(`id`,`name`,`count`,`vote_id`,`created_time`,`updated_time`)VALUES(1,\u0026#39;红烧肉\u0026#39;,0,1,\u0026#39;2024-04-06 15:07:30\u0026#39;,\u0026#39;2024-04-06 15:07:30\u0026#39;),(2,\u0026#39;回锅肉\u0026#39;,0,1,\u0026#39;2024-04-06 15:07:30\u0026#39;,\u0026#39;2024-04-06 15:07:30\u0026#39;),(3,\u0026#39;东坡肉\u0026#39;,0,1,\u0026#39;2024-04-06 15:07:30\u0026#39;,\u0026#39;2024-04-06 15:07:30\u0026#39;),(4,\u0026#39;会用\u0026#39;,3,2,\u0026#39;2024-04-07 07:45:18\u0026#39;,\u0026#39;2024-04-07 07:45:18\u0026#39;),(5,\u0026#39;会用一点\u0026#39;,4,2,\u0026#39;2024-04-07 07:45:21\u0026#39;,\u0026#39;2024-04-07 07:45:21\u0026#39;),(6,\u0026#39;不会用\u0026#39;,4,2,\u0026#39;2024-04-07 07:45:21\u0026#39;,\u0026#39;2024-04-07 07:45:21\u0026#39;);更新 view/vote.html 显示更多选项信息  使用 input:checkbox 作为多选框。 (Todo: 这里是否使用多选框， 应该更具数据库中 Vote 的 Type 字段值确定) 设置一个隐藏 input 用于提交 vote_id 信息。 使用 form 表单提交数据    \u0026lt;!-- vote 选项信息--\u0026gt; \u0026lt;div class=\u0026#34;vote-opt\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;/vote\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;!-- 1. 向服务端提交 vote_id, 2. 但不在页面上显示--\u0026gt; \u0026lt;input hidden=\u0026#34;hidden\u0026#34; name=\u0026#34;vote_id\u0026#34; type=\u0026#34;text\u0026#34; value=\u0026#34;{{ .Vote.Id }}\u0026#34; /\u0026gt; {{ range $key, $value := .Opts }} \u0026lt;div\u0026gt; \u0026lt;!-- name 统一使用 opts, 服务端使用 数组/切片 接收 --\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;opts\u0026#34; id=\u0026#34;opt{{$value.Id}}\u0026#34; value=\u0026#34;{{$value.Id}}\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;opt{{$value.Id}}\u0026#34;\u0026gt;{{$value.Name}} --- {{ $value.Count }}次\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; 请求 Payload 为\nPOST http://127.0.0.1:8080/vote Content-Type: application/x-www-form-urlencoded vote_id=2\u0026amp;opts=5\u0026amp;opts=6 在 logic/vote.go 中添加处理提交数据的方法  type PostVoteParams struct { VoteId int64 `form:\u0026#34;vote_id\u0026#34; json:\u0026#34;vote_id\u0026#34; binding:\u0026#34;required\u0026#34;` // 使用 切片 接收 \tOpts []int64 `form:\u0026#34;opts\u0026#34; json:\u0026#34;opts\u0026#34; binding:\u0026#34;required\u0026#34;` } func PostVoteHandler(c *gin.Context) { p := \u0026amp;PostVoteParams{} if err := c.ShouldBind(p); err != nil { c.JSON(http.StatusBadRequest, tools.EcodeBadRequest(err.Error())) return } for _, id := range p.Opts { err := model.UpdateVoteCount(id, p.VoteId) if err != nil { panic(err) } } // 重定向到 GET vote 页面 \tc.Redirect(http.StatusSeeOther, \u0026#34;/vote?id=\u0026#34;+strconv.FormatInt(p.VoteId, 10)) } 在 router/router.go 中添加路由  authorized.POST(\u0026#34;/vote\u0026#34;, logic.PostVoteHandler)  ","description":"1. 渲染数据到登录后首页      https://www.bilibili.com/video/BV1AZ42117JH/\n  在 logic/index.go 页面中从 model.vote 中数据所有投票数据。  func IndexLogin(c *gin.Context) { name, _ := c.Cookie(\u0026#34;name\u0026#34;) // 获取所有投票数据 \tvotes, err := model.GetVotes() if err != nil { c.JSON(http.StatusBadRequest, tools.Ecode{ Code: http.StatusBadRequest, Message: err.Error(), }) } // 添加到 data 中进行渲染 \tdata := map[string]any{ \u0026#34;Name\u0026#34;: name, \u0026#34;Votes\u0026#34;: votes, } c.HTML(200, \u0026#34;index-login.tmpl\u0026#34;, data) } 在 view/index-login.tmpl 中添加投票数据渲染模版  \u0026lt;h3\u0026gt;投票列表\u0026lt;/h3\u0026gt; {{ range $key, $value := ."},{"id":5,"href":"/books/gin-vote-demo/v1/ping-pong/","title":"2. 使用 go template 实现一个登录页面","parent":"V1","content":"1. 管理静态页面模版      在项目根目录中， 创建 tmpl 管理静态页面模版。 创建 tmpl/login.tmpl 作为登陆页面  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Login\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Your Name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Sign in\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2. gin 加载静态模版， 并对外提供路由      使用 r.LoadHTMLGlob(\u0026quot;tmpl/*\u0026quot;) 缓存静态文件 在使用时， 就直接使用相对路径了。 c.HTML(http.StatusOK, \u0026quot;login.tmpl\u0026quot;, nil)  package main import ( \u0026#34;net/http\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func main() { // #2. 使用 LoadHTMLGlob 加载模板文件 \tr.LoadHTMLGlob(\u0026#34;tmpl/*\u0026#34;) // Login GET \tr.GET(\u0026#34;/login\u0026#34;, getLoginHandler) } func getLoginHandler(c *gin.Context) { // #2. 使用模版文件 \t// 完整页面， 没有数据传入 \tc.HTML(http.StatusOK, \u0026#34;login.tmpl\u0026#34;, nil) } 3. 启动服务， 查看结果     访问登陆页面 /login\n ","description":"1. 管理静态页面模版      在项目根目录中， 创建 tmpl 管理静态页面模版。 创建 tmpl/login.tmpl 作为登陆页面  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Login\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Your Name\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Sign in\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2. gin 加载静态模版， 并对外提供路由      使用 r.LoadHTMLGlob(\u0026quot;tmpl/*\u0026quot;) 缓存静态文件 在使用时， 就直接使用相对路径了。 c.HTML(http.StatusOK, \u0026quot;login.tmpl\u0026quot;, nil)  package main import ( \u0026#34;net/http\u0026#34; \u0026#34;github."},{"id":6,"href":"/books/gin-vote-demo/v1/post-form/","title":"3. 使用 POST 提交 Form 表单","parent":"V1","content":"1. 创建 User 接受数据      form 用于绑定 post 提交的数据 json 用于返回展示。  type User struct { Name string `form:\u0026#34;name\u0026#34; json:\u0026#34;name\u0026#34;` Password string `form:\u0026#34;password\u0026#34; json:\u0026#34;password\u0026#34;` } 2. 创建 postLoginHandler 实现绑定逻辑     这里看注释。\n需要 注意 在错误处理之后， 使用 return 结束逻辑。\nfunc postLoginHandler(c *gin.Context) { // #5 获取表单数据 \tuser := \u0026amp;User{} err := c.ShouldBind(user) if err != nil { c.String(http.StatusBadRequest, \u0026#34;bad request\u0026#34;) // 显示错误信息之后， 一定要 return 结束后序逻辑 \treturn } // 成功后显示用户信息 \tc.JSON(http.StatusOK, user) } 3. 绑定 Post 路由     虽然绑定的 都是 /login 路径。 但是由于请求方法不同 GET / POST， 路由规则是合法的。\n// Login GET \tr.GET(\u0026#34;/login\u0026#34;, getLoginHandler) // #5. 获取表单数据 \tr.POST(\u0026#34;/login\u0026#34;, postLoginHandler) 但是， 如果 路径 和 方法 一致， 则会 冲突 并 panic。\n4. 测试      ","description":"1. 创建 User 接受数据      form 用于绑定 post 提交的数据 json 用于返回展示。  type User struct { Name string `form:\u0026#34;name\u0026#34; json:\u0026#34;name\u0026#34;` Password string `form:\u0026#34;password\u0026#34; json:\u0026#34;password\u0026#34;` } 2. 创建 postLoginHandler 实现绑定逻辑     这里看注释。\n需要 注意 在错误处理之后， 使用 return 结束逻辑。\nfunc postLoginHandler(c *gin.Context) { // #5 获取表单数据 \tuser := \u0026amp;User{} err := c.ShouldBind(user) if err != nil { c.String(http.StatusBadRequest, \u0026#34;bad request\u0026#34;) // 显示错误信息之后， 一定要 return 结束后序逻辑 \treturn } // 成功后显示用户信息 \tc."},{"id":7,"href":"/books/gin-vote-demo/v1/gorm-conn/","title":"4. 使用 GORM 连接 MySQL","parent":"V1","content":"1. 使用 docker-compose 创建 MySQL 实例     使用 docker-compose 管理 Mysql 容器\n# docker-compose.ymlversion:\u0026#39;3.1\u0026#39;services:db:network_mode:defaultimage:mysql:8.3# command: --default-authentication-plugin=mysql_native_passwordrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:Mysql12345volumes:- ./mysql-data:/var/lib/mysqlports:- 3306:3306运行 MySQL 容器\n$ docker-compose up -d 2. 初始化数据库和表     SETNAMESutf8mb4;SETFOREIGN_KEY_CHECKS=0;-- ---------------------------- -- Table structure for user -- ---------------------------- DROPTABLEIFEXISTS`user`;CREATETABLE`user`(`id`bigint(20)NOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULL,`updated_time`datetimeDEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=3DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- ---------------------------- -- Records of user -- ---------------------------- BEGIN;INSERTINTO`user`(`id`,`name`,`password`,`created_time`,`updated_time`)VALUES(1,\u0026#39;admin\u0026#39;,\u0026#39;admin\u0026#39;,\u0026#39;2024-03-31 16:42:40\u0026#39;,\u0026#39;2024-03-31 16:42:42\u0026#39;);INSERTINTO`user`(`id`,`name`,`password`,`created_time`,`updated_time`)VALUES(2,\u0026#39;admin1\u0026#39;,\u0026#39;admin1\u0026#39;,\u0026#39;2024-03-31 16:45:46\u0026#39;,\u0026#39;2024-03-31 16:45:48\u0026#39;);COMMIT;SETFOREIGN_KEY_CHECKS=1;3. 单例模式创建 gorm 连接     // 创建 mysql 连接  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;gorm.io/driver/mysql\u0026#34; \u0026#34;gorm.io/gorm\u0026#34; ) // DBConn 连接数据库 // #7. 连接数据库 // https://gorm.io/docs/connecting_to_the_database.html func DBConn() *gorm.DB { dsnfmt := \u0026#34;%s:%s@tcp(%s:%d)/%s?charset=utf8mb4\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34; dsn := fmt.Sprintf(dsnfmt, \u0026#34;root\u0026#34;, \u0026#34;Mysql12345\u0026#34;, \u0026#34;127.0.0.1\u0026#34;, 3306, \u0026#34;vote\u0026#34;) db, err := gorm.Open(mysql.Open(dsn), \u0026amp;gorm.Config{}) if err != nil { panic(err) } return db } // 定义全局 DB 连接 var GlobalConn *gorm.DB // 初始化函数， 在 main 函数之前执行 func init() { if GlobalConn == nil { GlobalConn = DBConn() } } 4. 在登录请求中查询数据库     func postLoginHandler(c *gin.Context) { // #5 获取表单数据 \tuser := \u0026amp;User{} err := c.ShouldBind(user) // 省略...  // #7. 连接数据库, 查询用户 \t// https://gorm.io/docs/query.html \ttx := GlobalConn.Table(\u0026#34;user\u0026#34;).Where(\u0026#34;name = ? AND password = ?\u0026#34;, user.Name, user.Password).First(user) if tx.Error != nil { c.JSON(http.StatusBadRequest, gin.H{ \u0026#34;msg\u0026#34;: \u0026#34;user not found\u0026#34;, \u0026#34;error\u0026#34;: fmt.Sprintf(\u0026#34;%v\u0026#34;, tx.Error), }) return } // 成功后显示用户信息 \tc.JSON(http.StatusOK, user) }  ","description":"1. 使用 docker-compose 创建 MySQL 实例     使用 docker-compose 管理 Mysql 容器\n# docker-compose.ymlversion:\u0026#39;3.1\u0026#39;services:db:network_mode:defaultimage:mysql:8.3# command: --default-authentication-plugin=mysql_native_passwordrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:Mysql12345volumes:- ./mysql-data:/var/lib/mysqlports:- 3306:3306运行 MySQL 容器\n$ docker-compose up -d 2. 初始化数据库和表     SETNAMESutf8mb4;SETFOREIGN_KEY_CHECKS=0;-- ---------------------------- -- Table structure for user -- ---------------------------- DROPTABLEIFEXISTS`user`;CREATETABLE`user`(`id`bigint(20)NOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULL,`updated_time`datetimeDEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=3DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;-- ---------------------------- -- Records of user -- ---------------------------- BEGIN;INSERTINTO`user`(`id`,`name`,`password`,`created_time`,`updated_time`)VALUES(1,\u0026#39;admin\u0026#39;,\u0026#39;admin\u0026#39;,\u0026#39;2024-03-31 16:42:40\u0026#39;,\u0026#39;2024-03-31 16:42:42\u0026#39;);INSERTINTO`user`(`id`,`name`,`password`,`created_time`,`updated_time`)VALUES(2,\u0026#39;admin1\u0026#39;,\u0026#39;admin1\u0026#39;,\u0026#39;2024-03-31 16:45:46\u0026#39;,\u0026#39;2024-03-31 16:45:48\u0026#39;);COMMIT;SETFOREIGN_KEY_CHECKS=1;3. 单例模式创建 gorm 连接     // 创建 mysql 连接  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;gorm."},{"id":8,"href":"/books/gin-vote-demo/v1/mvc/","title":"5. 拆分为 MVC 目录结构","parent":"V1","content":"1. MVC 目录     $ tree app app ├── model # Model 数据库相关操作 ├── view # View 视图/模版相关操作 ├── logic # Controller 控制器/代码逻辑相关操作 ├── router # 路由相关的操作 └── tools # 公共组件 5 directories, 0 files 2. 拆分代码到 MVC 目录     $ tree app app ├── app.go ├── logic │ ├── login.go │ └── ping.go ├── model │ ├── db.go │ └── user.go ├── router │ └── router.go ├── tools └── view └── login.tmpl 5 directories, 7 files 3. GORM Model 中的查询的 OrderBy 规则      https://gorm.io/docs/query.html\nThe First and Last methods will find the first and last record (respectively) as ordered by primary key. They only work when a pointer to the destination struct is passed to the methods as argument or when the model is specified using db.Model(). Additionally, if no primary key is defined for relevant model, then the model will be ordered by the first field. For example:\n // GetUser 查询用户数据 // https://gorm.io/docs/query.html func GetUser(user *User) (*User, error) { u2 := \u0026amp;User{} // no primary key defined, results will be ordered by first field (i.e., `user.name`) \t// SELECT * FROM `user` WHERE name = \u0026#39;admin\u0026#39; AND password = \u0026#39;admin123\u0026#39; ORDER BY `user`.`name` LIMIT 1 \ttx := Conn.Table(\u0026#34;user\u0026#34;).Where(\u0026#34;name = ? AND password = ?\u0026#34;, user.Name, user.Password).First(u2) if tx.Error != nil { return nil, tx.Error } if tx.RowsAffected == 0 { return nil, fmt.Errorf(\u0026#34;user not found\u0026#34;) } return u2, nil } ","description":"1. MVC 目录     $ tree app app ├── model # Model 数据库相关操作 ├── view # View 视图/模版相关操作 ├── logic # Controller 控制器/代码逻辑相关操作 ├── router # 路由相关的操作 └── tools # 公共组件 5 directories, 0 files 2. 拆分代码到 MVC 目录     $ tree app app ├── app.go ├── logic │ ├── login.go │ └── ping.go ├── model │ ├── db.go │ └── user.go ├── router │ └── router."},{"id":9,"href":"/books/gin-vote-demo/v1/cookie-check/","title":"6. 使用 cookie 管理登录状态","parent":"V1","content":"1. 使用 SQL 转 Struct 匹配对象      http://www.gotool.top/handlesql/sql2gorm\n 建表 SQL\nCREATETABLE`user`(`id`bigint(20)NOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULL,`updated_time`datetimeDEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=3DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;转换的对象\ntype User struct { Id int64 `gorm:\u0026#34;column:id;primary_key;AUTO_INCREMENT;NOT NULL\u0026#34; form:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34;` Name string `gorm:\u0026#34;column:name;default:NULL\u0026#34; form:\u0026#34;name\u0026#34; json:\u0026#34;name\u0026#34;` Password string `gorm:\u0026#34;column:password;default:NULL\u0026#34; form:\u0026#34;password\u0026#34; json:\u0026#34;password\u0026#34;` CreatedTime time.Time `gorm:\u0026#34;column:created_time;default:NULL\u0026#34; form:\u0026#34;createdTime\u0026#34; json:\u0026#34;createdTime\u0026#34;` UpdatedTime time.Time `gorm:\u0026#34;column:updated_time;default:NULL\u0026#34; form:\u0026#34;updatedTime\u0026#34; json:\u0026#34;updatedTime\u0026#34;` } 2. 创建 Gin RouterGroup 管理 Index 页面     在 router/router.go 中创建 路由分组\n// 首页 \tr.GET(\u0026#34;/\u0026#34;, logic.Index) { index := r.Group(\u0026#34;\u0026#34;) // 使用中间件， 检查cookie \tindex.Use(logic.IndexLoginCheckerMiddleware) // 登录后首页 \tindex.GET(\u0026#34;/index\u0026#34;, logic.IndexLogin) } 公共首页\n 登录后首页\n 3. 成功登录后设置 Cookie 与跳转      使用 c.SetCookie 设置 Cookie 使用 c.Redirect 跳转到登录首页。 注意不同的状态的跳转后 请求方法 是不同的。  303(SeeOther): 只使用 GET 方法 跳转。 307(Temporary)/308(Permanent): 保持 当前方法 跳转 (Post -\u0026gt; Post)    func PostLoginHandler(c *gin.Context) { // #5 获取表单数据 \tuser := \u0026amp;model.User{} err := c.ShouldBind(user) if err != nil { c.String(http.StatusBadRequest, \u0026#34;bad request\u0026#34;) // 显示错误信息之后， 一定要 return 结束后序逻辑 \treturn } // # 查询用户 \tret, err := model.GetUser(user) if err != nil { c.JSON(http.StatusBadRequest, gin.H{ \u0026#34;msg\u0026#34;: \u0026#34;user not found\u0026#34;, \u0026#34;error\u0026#34;: fmt.Sprintf(\u0026#34;%v\u0026#34;, err), }) return } // domain 设置为空， 任意域名都可以生效 \t// domain 设置不为空， 则仅对特定域名生效 \tc.SetCookie(\u0026#34;name\u0026#34;, ret.Name, 3600, \u0026#34;/\u0026#34;, \u0026#34;\u0026#34;, true, false) // 成功后显示用户信息 \t// 303: redirect with GET method \t// 307: redirect with Current method (post -\u0026gt; post) \tc.Redirect(http.StatusSeeOther, \u0026#34;/index\u0026#34;) // c.JSON(http.StatusOK, ret)  } 4. 设置中间件     检查 cookie 则跳转到登录页面\n// IndexLoginCheckerMiddleware 检查 cookie 则跳转到登录页面 func IndexLoginCheckerMiddleware(c *gin.Context) { name, err := c.Cookie(\u0026#34;name\u0026#34;) if err != nil || name == \u0026#34;\u0026#34; { // 跳转到登录页面 \tc.Redirect(http.StatusSeeOther, \u0026#34;/login\u0026#34;) // c.Abort() \treturn } c.Next() } ","description":"1. 使用 SQL 转 Struct 匹配对象      http://www.gotool.top/handlesql/sql2gorm\n 建表 SQL\nCREATETABLE`user`(`id`bigint(20)NOTNULLAUTO_INCREMENT,`name`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`password`varchar(50)COLLATEutf8mb4_binDEFAULTNULL,`created_time`datetimeDEFAULTNULL,`updated_time`datetimeDEFAULTNULL,PRIMARYKEY(`id`))ENGINE=InnoDBAUTO_INCREMENT=3DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_bin;转换的对象\ntype User struct { Id int64 `gorm:\u0026#34;column:id;primary_key;AUTO_INCREMENT;NOT NULL\u0026#34; form:\u0026#34;id\u0026#34; json:\u0026#34;id\u0026#34;` Name string `gorm:\u0026#34;column:name;default:NULL\u0026#34; form:\u0026#34;name\u0026#34; json:\u0026#34;name\u0026#34;` Password string `gorm:\u0026#34;column:password;default:NULL\u0026#34; form:\u0026#34;password\u0026#34; json:\u0026#34;password\u0026#34;` CreatedTime time.Time `gorm:\u0026#34;column:created_time;default:NULL\u0026#34; form:\u0026#34;createdTime\u0026#34; json:\u0026#34;createdTime\u0026#34;` UpdatedTime time.Time `gorm:\u0026#34;column:updated_time;default:NULL\u0026#34; form:\u0026#34;updatedTime\u0026#34; json:\u0026#34;updatedTime\u0026#34;` } 2. 创建 Gin RouterGroup 管理 Index 页面     在 router/router.go 中创建 路由分组\n// 首页 \tr.GET(\u0026#34;/\u0026#34;, logic.Index) { index := r."},{"id":10,"href":"/books/gin-vote-demo/v1/common-resp/","title":"7. 通用返回结构","parent":"V1","content":"通用返回结构可以使返回对象更加标准， 方便对接前端。\n1. 定义通用结构     type Ecode struct { Code int `json:\u0026#34;code\u0026#34;` // code, 可以自定错误代码 \tMessage string `json:\u0026#34;message\u0026#34;` // 消息 \tData any `json:\u0026#34;data\u0026#34;` // 数据 } 2. 使用通用结构     在各个 Handler 中， 找到需要返回的地方， 修改为通用结构\n例如 PingHandler\n// c.String(http.StatusOK, \u0026#34;pong\u0026#34;)  c.JSON(http.StatusOK, tools.Ecode{ Code: http.StatusOK, Message: \u0026#34;pong\u0026#34;, }) 再如 LoginHandler 登录失败时\n// c.JSON(http.StatusBadRequest, gin.H{ // \u0026#34;msg\u0026#34;: \u0026#34;user not found\u0026#34;, // \u0026#34;error\u0026#34;: fmt.Sprintf(\u0026#34;%v\u0026#34;, err), // })  c.JSON(http.StatusBadRequest, tools.Ecode{ Code: http.StatusBadRequest, Message: fmt.Sprintf(\u0026#34;%v\u0026#34;, err), })  ","description":"通用返回结构可以使返回对象更加标准， 方便对接前端。\n1. 定义通用结构     type Ecode struct { Code int `json:\u0026#34;code\u0026#34;` // code, 可以自定错误代码 \tMessage string `json:\u0026#34;message\u0026#34;` // 消息 \tData any `json:\u0026#34;data\u0026#34;` // 数据 } 2. 使用通用结构     在各个 Handler 中， 找到需要返回的地方， 修改为通用结构\n例如 PingHandler\n// c.String(http.StatusOK, \u0026#34;pong\u0026#34;)  c.JSON(http.StatusOK, tools.Ecode{ Code: http.StatusOK, Message: \u0026#34;pong\u0026#34;, }) 再如 LoginHandler 登录失败时\n// c.JSON(http.StatusBadRequest, gin.H{ // \u0026#34;msg\u0026#34;: \u0026#34;user not found\u0026#34;, // \u0026#34;error\u0026#34;: fmt.Sprintf(\u0026#34;%v\u0026#34;, err), // })  c."},{"id":11,"href":"/books/gin-vote-demo/v1/list-vote/","title":"9. 列出所有投票并撰写单元测试","parent":"V1","content":"1. 列出所有投票结果     在 /model/vote.go 中添加以下代码：\n// GetVotes 获取投票列表 func GetVotes() ([]Vote, error) { votes := make([]Vote, 0) tx := Conn.Table(\u0026#34;vote\u0026#34;).Find(\u0026amp;votes) if tx.Error != nil { return nil, tx.Error } return votes, nil } 2. 插入数据     在 vote 表中插入一些数据：\nINSERTINTO`vote`(`id`,`title`,`type`,`status`,`user_id`,`expired_in`,`created_time`,`updated_time`)VALUES(1,\u0026#39;今天晚上吃什么\u0026#39;,0,0,1,86400,\u0026#39;2024-04-06 08:03:01\u0026#39;,\u0026#39;2024-04-06 08:03:01\u0026#39;),(2,\u0026#39;你会用vscode吗\u0026#39;,0,0,2,86400,\u0026#39;2024-04-06 08:03:01\u0026#39;,\u0026#39;2024-04-06 08:03:01\u0026#39;);3. 撰写简单的单元测试     创建 /model/vote_test.go, 编写一个简单的单元测试：\nfunc init() { NewMysql() } // TestGetVotes 测试获取投票列表 func TestGetVotes(t *testing.T) { votes, err := GetVotes() if err != nil { t.Errorf(\u0026#34;GetVotes() failed: %v\u0026#34;, err) } //t.Logf(\u0026#34;votes: %v\u0026#34;, votes) \tfor _, v := range votes { t.Logf(\u0026#34;vote: %v\u0026#34;, v) } } 测试结果如下\n=== RUN TestGetVotes vote_test.go:20: vote: {1 今天晚上吃什么 0 0 1 86400 2024-04-06 08:03:01 +0800 CST 2024-04-06 08:03:01 +0800 CST} vote_test.go:20: vote: {2 你会用vscode吗 0 0 2 86400 2024-04-06 08:03:01 +0800 CST 2024-04-06 08:03:01 +0800 CST} ","description":"1. 列出所有投票结果     在 /model/vote.go 中添加以下代码：\n// GetVotes 获取投票列表 func GetVotes() ([]Vote, error) { votes := make([]Vote, 0) tx := Conn.Table(\u0026#34;vote\u0026#34;).Find(\u0026amp;votes) if tx.Error != nil { return nil, tx.Error } return votes, nil } 2. 插入数据     在 vote 表中插入一些数据：\nINSERTINTO`vote`(`id`,`title`,`type`,`status`,`user_id`,`expired_in`,`created_time`,`updated_time`)VALUES(1,\u0026#39;今天晚上吃什么\u0026#39;,0,0,1,86400,\u0026#39;2024-04-06 08:03:01\u0026#39;,\u0026#39;2024-04-06 08:03:01\u0026#39;),(2,\u0026#39;你会用vscode吗\u0026#39;,0,0,2,86400,\u0026#39;2024-04-06 08:03:01\u0026#39;,\u0026#39;2024-04-06 08:03:01\u0026#39;);3. 撰写简单的单元测试     创建 /model/vote_test.go, 编写一个简单的单元测试：\nfunc init() { NewMysql() } // TestGetVotes 测试获取投票列表 func TestGetVotes(t *testing.T) { votes, err := GetVotes() if err !"},{"id":12,"href":"/books/gin-vote-demo/tags/","title":"Tags","parent":"","content":"","description":""}]